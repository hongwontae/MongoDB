1. Relations
=> 관계를 통해 문제를 해결할 방법으로 두 가지 방법이 있습니다.

=> 중첩된(임베딩) 문서 vs 참조 방식입니다.
=> 중첩된 문서는 컬렉션의 문서에 다른 부가 정보를 중첩 방식으로 추가하는 것을 의미합니다.
=> 검색이 빨라질 수 있으나 저장 효율성이 떨어집니다. (반 정규화)

=> 참조 방식은 각기 다른 collction으로 만들고 참조할 속성을 건네주는 방식입니다.
=> 검색이 느려질 수 있으나 저장 효율성이나 무결하게 만들 수 있습니다. (정규화)


2. 일대일
=> 각기 다른 정보 두 가지가 있다고 가정했을 떄,
=> 만약 중첩 문서를 사용하지 않고 컬렉션을 분리했다면 NoSql을 두 번 사용해야 합니다. 검색 속도 ▼
=> 중첩된 문서를 사용한다면 NoSql 한 번만으로 원하는 데이터를 얻을 수 있습니다. 검색 속도 ▼

=> 임베딩된 데이터 구조는 조회 속도가 빠르고 참조 방식은 자주 업데이트할 떄 유요합니다.
=> 일대일 참조방식은 각 문서의 1대1에 해당되는 문서의 ID가 존재합니다.


3. 일대다
=> 일대다 구조를 가지고 있을 떄,
=> 하나의 컬렉션의 문서에 참조할 컬렉션의 고유한 _id 여러개를 배열로 갖고 있습니다. 
(중첩이지만 id만 갖고 있습니다.)
(문서를 자주 업데이트하거나 별도로 조회할 떄 유리합니다.)

=> 하나의 컬렉션의 문서에 key에 다른 역할을 가진 컬렉션 역할을 하는 문서를 배열로 갖고 있습니다. (중첩이며 배열로 참조할
모든 데이터가 존재합니다.) (이 떄는 조회할 떄 유리합니다.)