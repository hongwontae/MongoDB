1. db.createCollection(arg1, arg2)
=> 컬렉션을 생성하고 스키마 유효성 검사를 정의하는 메서드입니다.
=> 한 번 createCollection으로 컬렉션을 만들면 다시 덮어쓸 수 없습니다.
=> 수정하고 싶다면 db.runCommand({colMod : "collecitonName", validator : {...} })을 사용해야 합니다.
=> 이 떄 validator를 전체를 다시 정의해야 합니다.

1-1. arg1
=> collection 이름을 정의합니다.

1-2. arg2
=> 객체를 받습니다.
=> {
    // 컬렉션에 삽입되는 문서가 특정 조건을 만족하는지 검사기능을 제공합니다.
    validator : { 
        // 문서의 데이터 타입, 필수 필드, 값의 범위 등을 JSON 형식으로 지정하는 방법입니다.
        $jsonSchema : {
            // 문서의 타입을 지정합니다. 즉, 문서는 object 타입입니다.
            bsonType : "object",
            // 문서의 필수 필드를 지정합니다.
            required : ["title", "price", "profile"],
            // 각 필드의 속성을 정의합니다.
            properties : {
                title : {
                    bsonType : "string",
                    // 만약 필드의 타입이 다르게 들어오면 해당 description을 반환하고 실패합니다.
                    description : "문자열만 허용합니다."
                },
                age : {
                    bsonType : "int",
                     minimum: 18, // 최소 나이 18세
                     maximum: 99, // 최대 나이 99세
                    description: "사용자의 나이 (18~99 사이의 정수)"
                },
                // 임베딩한 객체 스키마를 정의하는 방법입니다.
                profile : {
                    bsonType : "object",
                    requried : ["",""],
                    properties : {
                        age : {...},
                        address : {...}
                    }
                }
            }
        }
    },
    // error가 기본값입니다. 들어오는 값이 스키마 정의와 다르면 error를 발생시키고 description을 전달합니다.
    // warn은 성공하지만 description을 전달합니다.
    validationAction : "error",
    // strict이 기본값입니다. 모든 문서에 대해 스키마 검사를 강제합니다.
    // moderate는 기존 문서에는 적용하지 않고 새로 추가되는 문서에만 적용합니다.
    validationLevel : "strict"
}